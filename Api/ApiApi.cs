/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Mrc.SensorPushCore.Client;
using Mrc.SensorPushCore.Model;

namespace Mrc.SensorPushCore.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Request a temporary oAuth access code.
        /// </summary>
        /// <remarks>
        /// This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>AccessTokenResponse</returns>
        AccessTokenResponse AccessToken (AccessTokenRequest accessTokenRequest);

        /// <summary>
        /// Request a temporary oAuth access code.
        /// </summary>
        /// <remarks>
        /// This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        ApiResponse<AccessTokenResponse> AccessTokenWithHttpInfo (AccessTokenRequest accessTokenRequest);
        /// <summary>
        /// Download bulk reports.
        /// </summary>
        /// <remarks>
        /// This service will download bulk generated reports.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns></returns>
        void Download (ReportsRequest reportsRequest);

        /// <summary>
        /// Download bulk reports.
        /// </summary>
        /// <remarks>
        /// This service will download bulk generated reports.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadWithHttpInfo (ReportsRequest reportsRequest);
        /// <summary>
        /// Lists all gateways.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered gateways for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Gateways</returns>
        Gateways Gateways (GatewaysRequest gatewaysRequest);

        /// <summary>
        /// Lists all gateways.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered gateways for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>ApiResponse of Gateways</returns>
        ApiResponse<Gateways> GatewaysWithHttpInfo (GatewaysRequest gatewaysRequest);
        /// <summary>
        /// Lists reports available for download.
        /// </summary>
        /// <remarks>
        /// This service will list all bulk generated reports available to download.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ListResponse</returns>
        ListResponse List (ReportsRequest reportsRequest);

        /// <summary>
        /// Lists reports available for download.
        /// </summary>
        /// <remarks>
        /// This service will list all bulk generated reports available to download.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ApiResponse of ListResponse</returns>
        ApiResponse<ListResponse> ListWithHttpInfo (ReportsRequest reportsRequest);
        /// <summary>
        /// Sign in and request an authorization code
        /// </summary>
        /// <remarks>
        /// Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>AuthorizeResponse</returns>
        AuthorizeResponse OauthAuthorizePost (AuthorizeRequest authorizeRequest);

        /// <summary>
        /// Sign in and request an authorization code
        /// </summary>
        /// <remarks>
        /// Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>ApiResponse of AuthorizeResponse</returns>
        ApiResponse<AuthorizeResponse> OauthAuthorizePostWithHttpInfo (AuthorizeRequest authorizeRequest);
        /// <summary>
        /// SensorPush API status
        /// </summary>
        /// <remarks>
        /// This service is used as a simple method for clients to verify they can connect to the API.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Status</returns>
        Status RootPost ();

        /// <summary>
        /// SensorPush API status
        /// </summary>
        /// <remarks>
        /// This service is used as a simple method for clients to verify they can connect to the API.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> RootPostWithHttpInfo ();
        /// <summary>
        /// Queries for sensor samples.
        /// </summary>
        /// <remarks>
        /// This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Samples</returns>
        Samples Samples (SamplesRequest samplesRequest);

        /// <summary>
        /// Queries for sensor samples.
        /// </summary>
        /// <remarks>
        /// This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>ApiResponse of Samples</returns>
        ApiResponse<Samples> SamplesWithHttpInfo (SamplesRequest samplesRequest);
        /// <summary>
        /// Lists all sensors.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered sensors for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Sensors</returns>
        Sensors Sensors (SensorsRequest sensorsRequest);

        /// <summary>
        /// Lists all sensors.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered sensors for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>ApiResponse of Sensors</returns>
        ApiResponse<Sensors> SensorsWithHttpInfo (SensorsRequest sensorsRequest);
        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens
        /// </summary>
        /// <remarks>
        /// This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>TokenResponse</returns>
        TokenResponse Token (TokenRequest tokenRequest);

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens
        /// </summary>
        /// <remarks>
        /// This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> TokenWithHttpInfo (TokenRequest tokenRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Request a temporary oAuth access code.
        /// </summary>
        /// <remarks>
        /// This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        System.Threading.Tasks.Task<AccessTokenResponse> AccessTokenAsync (AccessTokenRequest accessTokenRequest);

        /// <summary>
        /// Request a temporary oAuth access code.
        /// </summary>
        /// <remarks>
        /// This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> AccessTokenAsyncWithHttpInfo (AccessTokenRequest accessTokenRequest);
        /// <summary>
        /// Download bulk reports.
        /// </summary>
        /// <remarks>
        /// This service will download bulk generated reports.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadAsync (ReportsRequest reportsRequest);

        /// <summary>
        /// Download bulk reports.
        /// </summary>
        /// <remarks>
        /// This service will download bulk generated reports.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAsyncWithHttpInfo (ReportsRequest reportsRequest);
        /// <summary>
        /// Lists all gateways.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered gateways for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Task of Gateways</returns>
        System.Threading.Tasks.Task<Gateways> GatewaysAsync (GatewaysRequest gatewaysRequest);

        /// <summary>
        /// Lists all gateways.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered gateways for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Task of ApiResponse (Gateways)</returns>
        System.Threading.Tasks.Task<ApiResponse<Gateways>> GatewaysAsyncWithHttpInfo (GatewaysRequest gatewaysRequest);
        /// <summary>
        /// Lists reports available for download.
        /// </summary>
        /// <remarks>
        /// This service will list all bulk generated reports available to download.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ListResponse</returns>
        System.Threading.Tasks.Task<ListResponse> ListAsync (ReportsRequest reportsRequest);

        /// <summary>
        /// Lists reports available for download.
        /// </summary>
        /// <remarks>
        /// This service will list all bulk generated reports available to download.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ApiResponse (ListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListResponse>> ListAsyncWithHttpInfo (ReportsRequest reportsRequest);
        /// <summary>
        /// Sign in and request an authorization code
        /// </summary>
        /// <remarks>
        /// Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>Task of AuthorizeResponse</returns>
        System.Threading.Tasks.Task<AuthorizeResponse> OauthAuthorizePostAsync (AuthorizeRequest authorizeRequest);

        /// <summary>
        /// Sign in and request an authorization code
        /// </summary>
        /// <remarks>
        /// Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>Task of ApiResponse (AuthorizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizeResponse>> OauthAuthorizePostAsyncWithHttpInfo (AuthorizeRequest authorizeRequest);
        /// <summary>
        /// SensorPush API status
        /// </summary>
        /// <remarks>
        /// This service is used as a simple method for clients to verify they can connect to the API.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> RootPostAsync ();

        /// <summary>
        /// SensorPush API status
        /// </summary>
        /// <remarks>
        /// This service is used as a simple method for clients to verify they can connect to the API.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> RootPostAsyncWithHttpInfo ();
        /// <summary>
        /// Queries for sensor samples.
        /// </summary>
        /// <remarks>
        /// This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Task of Samples</returns>
        System.Threading.Tasks.Task<Samples> SamplesAsync (SamplesRequest samplesRequest);

        /// <summary>
        /// Queries for sensor samples.
        /// </summary>
        /// <remarks>
        /// This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Task of ApiResponse (Samples)</returns>
        System.Threading.Tasks.Task<ApiResponse<Samples>> SamplesAsyncWithHttpInfo (SamplesRequest samplesRequest);
        /// <summary>
        /// Lists all sensors.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered sensors for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Task of Sensors</returns>
        System.Threading.Tasks.Task<Sensors> SensorsAsync (SensorsRequest sensorsRequest);

        /// <summary>
        /// Lists all sensors.
        /// </summary>
        /// <remarks>
        /// This service will return an inventory of all registered sensors for this account.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        System.Threading.Tasks.Task<ApiResponse<Sensors>> SensorsAsyncWithHttpInfo (SensorsRequest sensorsRequest);
        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens
        /// </summary>
        /// <remarks>
        /// This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> TokenAsync (TokenRequest tokenRequest);

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens
        /// </summary>
        /// <remarks>
        /// This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </remarks>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> TokenAsyncWithHttpInfo (TokenRequest tokenRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApiApi : IApiApi
    {
        private Mrc.SensorPushCore.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApiApi(String basePath)
        {
            this.Configuration = new Mrc.SensorPushCore.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Mrc.SensorPushCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApiApi(Mrc.SensorPushCore.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Mrc.SensorPushCore.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Mrc.SensorPushCore.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mrc.SensorPushCore.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mrc.SensorPushCore.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Request a temporary oAuth access code. This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>AccessTokenResponse</returns>
        public AccessTokenResponse AccessToken (AccessTokenRequest accessTokenRequest)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = AccessTokenWithHttpInfo(accessTokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a temporary oAuth access code. This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>ApiResponse of AccessTokenResponse</returns>
        public ApiResponse< AccessTokenResponse > AccessTokenWithHttpInfo (AccessTokenRequest accessTokenRequest)
        {
            // verify the required parameter 'accessTokenRequest' is set
            if (accessTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'accessTokenRequest' when calling ApiApi->AccessToken");

            var localVarPath = "/oauth/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessTokenRequest != null && accessTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accessTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accessTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Request a temporary oAuth access code. This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>Task of AccessTokenResponse</returns>
        public async System.Threading.Tasks.Task<AccessTokenResponse> AccessTokenAsync (AccessTokenRequest accessTokenRequest)
        {
             ApiResponse<AccessTokenResponse> localVarResponse = await AccessTokenAsyncWithHttpInfo(accessTokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a temporary oAuth access code. This is a simplified version of oAuth in that it only supports accesstokens and does not require a client_id. See the endpoint &#39;/api/v1/oauth/token&#39; for the more advanced oAuth endpoint. Once a user has been authorized, the client app will call this service to receive the access token. The access token will be used to grant permissions to data stores. An access token expires every hour. After that, request a new access token.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessTokenRequest"></param>
        /// <returns>Task of ApiResponse (AccessTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccessTokenResponse>> AccessTokenAsyncWithHttpInfo (AccessTokenRequest accessTokenRequest)
        {
            // verify the required parameter 'accessTokenRequest' is set
            if (accessTokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'accessTokenRequest' when calling ApiApi->AccessToken");

            var localVarPath = "/oauth/accesstoken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessTokenRequest != null && accessTokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accessTokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accessTokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccessToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccessTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccessTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccessTokenResponse)));
        }

        /// <summary>
        /// Download bulk reports. This service will download bulk generated reports.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns></returns>
        public void Download (ReportsRequest reportsRequest)
        {
             DownloadWithHttpInfo(reportsRequest);
        }

        /// <summary>
        /// Download bulk reports. This service will download bulk generated reports.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadWithHttpInfo (ReportsRequest reportsRequest)
        {
            // verify the required parameter 'reportsRequest' is set
            if (reportsRequest == null)
                throw new ApiException(400, "Missing required parameter 'reportsRequest' when calling ApiApi->Download");

            var localVarPath = "/reports/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportsRequest != null && reportsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Download", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download bulk reports. This service will download bulk generated reports.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadAsync (ReportsRequest reportsRequest)
        {
             await DownloadAsyncWithHttpInfo(reportsRequest);

        }

        /// <summary>
        /// Download bulk reports. This service will download bulk generated reports.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadAsyncWithHttpInfo (ReportsRequest reportsRequest)
        {
            // verify the required parameter 'reportsRequest' is set
            if (reportsRequest == null)
                throw new ApiException(400, "Missing required parameter 'reportsRequest' when calling ApiApi->Download");

            var localVarPath = "/reports/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportsRequest != null && reportsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Download", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Lists all gateways. This service will return an inventory of all registered gateways for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Gateways</returns>
        public Gateways Gateways (GatewaysRequest gatewaysRequest)
        {
             ApiResponse<Gateways> localVarResponse = GatewaysWithHttpInfo(gatewaysRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all gateways. This service will return an inventory of all registered gateways for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>ApiResponse of Gateways</returns>
        public ApiResponse< Gateways > GatewaysWithHttpInfo (GatewaysRequest gatewaysRequest)
        {
            // verify the required parameter 'gatewaysRequest' is set
            if (gatewaysRequest == null)
                throw new ApiException(400, "Missing required parameter 'gatewaysRequest' when calling ApiApi->Gateways");

            var localVarPath = "/devices/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gatewaysRequest != null && gatewaysRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gatewaysRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewaysRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gateways>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gateways) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gateways)));
        }

        /// <summary>
        /// Lists all gateways. This service will return an inventory of all registered gateways for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Task of Gateways</returns>
        public async System.Threading.Tasks.Task<Gateways> GatewaysAsync (GatewaysRequest gatewaysRequest)
        {
             ApiResponse<Gateways> localVarResponse = await GatewaysAsyncWithHttpInfo(gatewaysRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all gateways. This service will return an inventory of all registered gateways for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gatewaysRequest"></param>
        /// <returns>Task of ApiResponse (Gateways)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Gateways>> GatewaysAsyncWithHttpInfo (GatewaysRequest gatewaysRequest)
        {
            // verify the required parameter 'gatewaysRequest' is set
            if (gatewaysRequest == null)
                throw new ApiException(400, "Missing required parameter 'gatewaysRequest' when calling ApiApi->Gateways");

            var localVarPath = "/devices/gateways";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gatewaysRequest != null && gatewaysRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(gatewaysRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gatewaysRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Gateways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Gateways>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Gateways) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Gateways)));
        }

        /// <summary>
        /// Lists reports available for download. This service will list all bulk generated reports available to download.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ListResponse</returns>
        public ListResponse List (ReportsRequest reportsRequest)
        {
             ApiResponse<ListResponse> localVarResponse = ListWithHttpInfo(reportsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists reports available for download. This service will list all bulk generated reports available to download.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>ApiResponse of ListResponse</returns>
        public ApiResponse< ListResponse > ListWithHttpInfo (ReportsRequest reportsRequest)
        {
            // verify the required parameter 'reportsRequest' is set
            if (reportsRequest == null)
                throw new ApiException(400, "Missing required parameter 'reportsRequest' when calling ApiApi->List");

            var localVarPath = "/reports/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportsRequest != null && reportsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResponse)));
        }

        /// <summary>
        /// Lists reports available for download. This service will list all bulk generated reports available to download.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ListResponse</returns>
        public async System.Threading.Tasks.Task<ListResponse> ListAsync (ReportsRequest reportsRequest)
        {
             ApiResponse<ListResponse> localVarResponse = await ListAsyncWithHttpInfo(reportsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists reports available for download. This service will list all bulk generated reports available to download.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportsRequest"></param>
        /// <returns>Task of ApiResponse (ListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListResponse>> ListAsyncWithHttpInfo (ReportsRequest reportsRequest)
        {
            // verify the required parameter 'reportsRequest' is set
            if (reportsRequest == null)
                throw new ApiException(400, "Missing required parameter 'reportsRequest' when calling ApiApi->List");

            var localVarPath = "/reports/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportsRequest != null && reportsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reportsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListResponse)));
        }

        /// <summary>
        /// Sign in and request an authorization code Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>AuthorizeResponse</returns>
        public AuthorizeResponse OauthAuthorizePost (AuthorizeRequest authorizeRequest)
        {
             ApiResponse<AuthorizeResponse> localVarResponse = OauthAuthorizePostWithHttpInfo(authorizeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign in and request an authorization code Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>ApiResponse of AuthorizeResponse</returns>
        public ApiResponse< AuthorizeResponse > OauthAuthorizePostWithHttpInfo (AuthorizeRequest authorizeRequest)
        {
            // verify the required parameter 'authorizeRequest' is set
            if (authorizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'authorizeRequest' when calling ApiApi->OauthAuthorizePost");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorizeRequest != null && authorizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authorizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authorizeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OauthAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizeResponse)));
        }

        /// <summary>
        /// Sign in and request an authorization code Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>Task of AuthorizeResponse</returns>
        public async System.Threading.Tasks.Task<AuthorizeResponse> OauthAuthorizePostAsync (AuthorizeRequest authorizeRequest)
        {
             ApiResponse<AuthorizeResponse> localVarResponse = await OauthAuthorizePostAsyncWithHttpInfo(authorizeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign in and request an authorization code Sign into the SensorPush API via redirect to SensorPush logon. Then signin using email/password, or an api id. This service will return an oAuth authorization code that can be exchanged for an oAuth access token using the accesstoken service.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeRequest"></param>
        /// <returns>Task of ApiResponse (AuthorizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AuthorizeResponse>> OauthAuthorizePostAsyncWithHttpInfo (AuthorizeRequest authorizeRequest)
        {
            // verify the required parameter 'authorizeRequest' is set
            if (authorizeRequest == null)
                throw new ApiException(400, "Missing required parameter 'authorizeRequest' when calling ApiApi->OauthAuthorizePost");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorizeRequest != null && authorizeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(authorizeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authorizeRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OauthAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AuthorizeResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AuthorizeResponse)));
        }

        /// <summary>
        /// SensorPush API status This service is used as a simple method for clients to verify they can connect to the API.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Status</returns>
        public Status RootPost ()
        {
             ApiResponse<Status> localVarResponse = RootPostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// SensorPush API status This service is used as a simple method for clients to verify they can connect to the API.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse< Status > RootPostWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// SensorPush API status This service is used as a simple method for clients to verify they can connect to the API.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> RootPostAsync ()
        {
             ApiResponse<Status> localVarResponse = await RootPostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// SensorPush API status This service is used as a simple method for clients to verify they can connect to the API.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> RootPostAsyncWithHttpInfo ()
        {

            var localVarPath = "/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RootPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Status) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Status)));
        }

        /// <summary>
        /// Queries for sensor samples. This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Samples</returns>
        public Samples Samples (SamplesRequest samplesRequest)
        {
             ApiResponse<Samples> localVarResponse = SamplesWithHttpInfo(samplesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Queries for sensor samples. This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>ApiResponse of Samples</returns>
        public ApiResponse< Samples > SamplesWithHttpInfo (SamplesRequest samplesRequest)
        {
            // verify the required parameter 'samplesRequest' is set
            if (samplesRequest == null)
                throw new ApiException(400, "Missing required parameter 'samplesRequest' when calling ApiApi->Samples");

            var localVarPath = "/samples";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (samplesRequest != null && samplesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(samplesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = samplesRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Samples", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Samples>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Samples) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Samples)));
        }

        /// <summary>
        /// Queries for sensor samples. This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Task of Samples</returns>
        public async System.Threading.Tasks.Task<Samples> SamplesAsync (SamplesRequest samplesRequest)
        {
             ApiResponse<Samples> localVarResponse = await SamplesAsyncWithHttpInfo(samplesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Queries for sensor samples. This service is used to query for samples persisted by the sensors. The service will return all samples after the given parameter {startTime}. Queries that produce greater than ~5MB of data will be truncated. If results return truncated, consider using the sensors parameter list. This will allow you to retrieve more data per sensor. For example, a query that does not provide a sensor list, will attempt to return equal amounts of data for all sensors (i.e. ~5MB divided by N sensors). However, if one sensor is specified, than all ~5MB will be filled for that one sensor (i.e. ~5MB divided by 1). Another option is to paginate through results by time, using {startTime} as the last date in your previous page of results.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="samplesRequest"></param>
        /// <returns>Task of ApiResponse (Samples)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Samples>> SamplesAsyncWithHttpInfo (SamplesRequest samplesRequest)
        {
            // verify the required parameter 'samplesRequest' is set
            if (samplesRequest == null)
                throw new ApiException(400, "Missing required parameter 'samplesRequest' when calling ApiApi->Samples");

            var localVarPath = "/samples";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (samplesRequest != null && samplesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(samplesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = samplesRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Samples", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Samples>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Samples) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Samples)));
        }

        /// <summary>
        /// Lists all sensors. This service will return an inventory of all registered sensors for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Sensors</returns>
        public Sensors Sensors (SensorsRequest sensorsRequest)
        {
             ApiResponse<Sensors> localVarResponse = SensorsWithHttpInfo(sensorsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all sensors. This service will return an inventory of all registered sensors for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>ApiResponse of Sensors</returns>
        public ApiResponse< Sensors > SensorsWithHttpInfo (SensorsRequest sensorsRequest)
        {
            // verify the required parameter 'sensorsRequest' is set
            if (sensorsRequest == null)
                throw new ApiException(400, "Missing required parameter 'sensorsRequest' when calling ApiApi->Sensors");

            var localVarPath = "/devices/sensors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorsRequest != null && sensorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sensorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sensorsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sensors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Sensors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Sensors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Sensors)));
        }

        /// <summary>
        /// Lists all sensors. This service will return an inventory of all registered sensors for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Task of Sensors</returns>
        public async System.Threading.Tasks.Task<Sensors> SensorsAsync (SensorsRequest sensorsRequest)
        {
             ApiResponse<Sensors> localVarResponse = await SensorsAsyncWithHttpInfo(sensorsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all sensors. This service will return an inventory of all registered sensors for this account.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sensorsRequest"></param>
        /// <returns>Task of ApiResponse (Sensors)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Sensors>> SensorsAsyncWithHttpInfo (SensorsRequest sensorsRequest)
        {
            // verify the required parameter 'sensorsRequest' is set
            if (sensorsRequest == null)
                throw new ApiException(400, "Missing required parameter 'sensorsRequest' when calling ApiApi->Sensors");

            var localVarPath = "/devices/sensors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sensorsRequest != null && sensorsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sensorsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sensorsRequest; // byte array
            }

            // authentication (oauth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Sensors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Sensors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Sensors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Sensors)));
        }

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>TokenResponse</returns>
        public TokenResponse Token (TokenRequest tokenRequest)
        {
             ApiResponse<TokenResponse> localVarResponse = TokenWithHttpInfo(tokenRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > TokenWithHttpInfo (TokenRequest tokenRequest)
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling ApiApi->Token");

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> TokenAsync (TokenRequest tokenRequest)
        {
             ApiResponse<TokenResponse> localVarResponse = await TokenAsyncWithHttpInfo(tokenRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// oAuth 2.0 for authorization, access, and refresh tokens This is a more advanced endpoint that implements the oAuth 2.0 specification. Supports grant_types: password, refresh_token, and access_token. If grant_type is null an access_token will be returned. (see &lt;a href&#x3D;\&quot;https://oauth.net/2/grant-types/\&quot;&gt;oAuth Grant Types&lt;/a&gt;). A client_id is required for this endpoint. Contact support@sensorpush.com to register your application and recieve a client_id.
        /// </summary>
        /// <exception cref="Mrc.SensorPushCore.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenRequest"></param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> TokenAsyncWithHttpInfo (TokenRequest tokenRequest)
        {
            // verify the required parameter 'tokenRequest' is set
            if (tokenRequest == null)
                throw new ApiException(400, "Missing required parameter 'tokenRequest' when calling ApiApi->Token");

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenRequest != null && tokenRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tokenRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tokenRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

    }
}
