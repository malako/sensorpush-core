/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// Status
    /// </summary>
    [DataContract]
    public partial class Status :  IEquatable<Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Status() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="deployed">Date time when this service was last updated..</param>
        /// <param name="message">Greeting message. (required).</param>
        /// <param name="stack">Active stack hosting this service..</param>
        /// <param name="status">Current status of the api service..</param>
        /// <param name="time">Current date time on the server..</param>
        /// <param name="version">Version of this service currently deployed.</param>
        public Status(string deployed = default(string), string message = default(string), string stack = default(string), string status = default(string), string time = default(string), string version = default(string))
        {
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for Status and cannot be null");
            }
            else
            {
                this.Message = message;
            }
            this.Deployed = deployed;
            this.Stack = stack;
            this._Status = status;
            this.Time = time;
            this.Version = version;
        }
        
        /// <summary>
        /// Date time when this service was last updated.
        /// </summary>
        /// <value>Date time when this service was last updated.</value>
        [DataMember(Name="deployed", EmitDefaultValue=false)]
        public string Deployed { get; set; }

        /// <summary>
        /// Greeting message.
        /// </summary>
        /// <value>Greeting message.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Active stack hosting this service.
        /// </summary>
        /// <value>Active stack hosting this service.</value>
        [DataMember(Name="stack", EmitDefaultValue=false)]
        public string Stack { get; set; }

        /// <summary>
        /// Current status of the api service.
        /// </summary>
        /// <value>Current status of the api service.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string _Status { get; set; }

        /// <summary>
        /// Current date time on the server.
        /// </summary>
        /// <value>Current date time on the server.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Version of this service currently deployed
        /// </summary>
        /// <value>Version of this service currently deployed</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  Deployed: ").Append(Deployed).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Stack: ").Append(Stack).Append("\n");
            sb.Append("  _Status: ").Append(_Status).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Status);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="input">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Deployed == input.Deployed ||
                    (this.Deployed != null &&
                    this.Deployed.Equals(input.Deployed))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Stack == input.Stack ||
                    (this.Stack != null &&
                    this.Stack.Equals(input.Stack))
                ) && 
                (
                    this._Status == input._Status ||
                    (this._Status != null &&
                    this._Status.Equals(input._Status))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deployed != null)
                    hashCode = hashCode * 59 + this.Deployed.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Stack != null)
                    hashCode = hashCode * 59 + this.Stack.GetHashCode();
                if (this._Status != null)
                    hashCode = hashCode * 59 + this._Status.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
