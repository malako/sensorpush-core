/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// Request object for samples.
    /// </summary>
    [DataContract]
    public partial class SamplesRequest :  IEquatable<SamplesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SamplesRequest" /> class.
        /// </summary>
        /// <param name="active">Filters sensors by active &#x3D; (true|false). Defaults to true.</param>
        /// <param name="bulk">Queries that return large results are truncated (see comments on Samples endpoint). Set this flag to true for large reports. The report request will be queued and processed within 24 hours. Upon completion, the primary account holder will recieve an email with a link for download..</param>
        /// <param name="format">Returns the results as the specified format (csv|json). Defaults to json.</param>
        /// <param name="limit">Number of samples to return..</param>
        /// <param name="sensors">Filters samples by sensor id. This will be the same id returned in the sensors api call. The parameter value must be a list of strings. Example: sensors: [\&quot;123.56789\&quot;]..</param>
        /// <param name="startTime">Start time to find samples (example: 2019-04-07T00:00:00-0400). Leave blank or zero to get the most recent samples..</param>
        /// <param name="stopTime">Stop time to find samples (example: 2019-04-07T10:30:00-0400). Leave blank or zero to get the most recent samples..</param>
        public SamplesRequest(bool? active = default(bool?), bool? bulk = default(bool?), string format = default(string), int? limit = default(int?), List<string> sensors = default(List<string>), string startTime = default(string), string stopTime = default(string))
        {
            this.Active = active;
            this.Bulk = bulk;
            this.Format = format;
            this.Limit = limit;
            this.Sensors = sensors;
            this.StartTime = startTime;
            this.StopTime = stopTime;
        }
        
        /// <summary>
        /// Filters sensors by active &#x3D; (true|false). Defaults to true
        /// </summary>
        /// <value>Filters sensors by active &#x3D; (true|false). Defaults to true</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Queries that return large results are truncated (see comments on Samples endpoint). Set this flag to true for large reports. The report request will be queued and processed within 24 hours. Upon completion, the primary account holder will recieve an email with a link for download.
        /// </summary>
        /// <value>Queries that return large results are truncated (see comments on Samples endpoint). Set this flag to true for large reports. The report request will be queued and processed within 24 hours. Upon completion, the primary account holder will recieve an email with a link for download.</value>
        [DataMember(Name="bulk", EmitDefaultValue=false)]
        public bool? Bulk { get; set; }

        /// <summary>
        /// Returns the results as the specified format (csv|json). Defaults to json
        /// </summary>
        /// <value>Returns the results as the specified format (csv|json). Defaults to json</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Number of samples to return.
        /// </summary>
        /// <value>Number of samples to return.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// Filters samples by sensor id. This will be the same id returned in the sensors api call. The parameter value must be a list of strings. Example: sensors: [\&quot;123.56789\&quot;].
        /// </summary>
        /// <value>Filters samples by sensor id. This will be the same id returned in the sensors api call. The parameter value must be a list of strings. Example: sensors: [\&quot;123.56789\&quot;].</value>
        [DataMember(Name="sensors", EmitDefaultValue=false)]
        public List<string> Sensors { get; set; }

        /// <summary>
        /// Start time to find samples (example: 2019-04-07T00:00:00-0400). Leave blank or zero to get the most recent samples.
        /// </summary>
        /// <value>Start time to find samples (example: 2019-04-07T00:00:00-0400). Leave blank or zero to get the most recent samples.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Stop time to find samples (example: 2019-04-07T10:30:00-0400). Leave blank or zero to get the most recent samples.
        /// </summary>
        /// <value>Stop time to find samples (example: 2019-04-07T10:30:00-0400). Leave blank or zero to get the most recent samples.</value>
        [DataMember(Name="stopTime", EmitDefaultValue=false)]
        public string StopTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SamplesRequest {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Bulk: ").Append(Bulk).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Sensors: ").Append(Sensors).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  StopTime: ").Append(StopTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SamplesRequest);
        }

        /// <summary>
        /// Returns true if SamplesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SamplesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SamplesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Bulk == input.Bulk ||
                    (this.Bulk != null &&
                    this.Bulk.Equals(input.Bulk))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Sensors == input.Sensors ||
                    this.Sensors != null &&
                    this.Sensors.SequenceEqual(input.Sensors)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.StopTime == input.StopTime ||
                    (this.StopTime != null &&
                    this.StopTime.Equals(input.StopTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Bulk != null)
                    hashCode = hashCode * 59 + this.Bulk.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Sensors != null)
                    hashCode = hashCode * 59 + this.Sensors.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.StopTime != null)
                    hashCode = hashCode * 59 + this.StopTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
