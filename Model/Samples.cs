/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// Map of registered SensorPush sensors
    /// </summary>
    [DataContract]
    public partial class Samples :  IEquatable<Samples>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Samples" /> class.
        /// </summary>
        /// <param name="lastTime">Timestamp of the last sample returned. Use this as the start_ts to query for the next page of samples..</param>
        /// <param name="sensors">Map of sensors and the associated samples..</param>
        /// <param name="status">Message describing state of the api call..</param>
        /// <param name="totalSamples">Total number of samples across all sensors.</param>
        /// <param name="totalSensors">Total number of sensors returned.</param>
        /// <param name="truncated">The query returned too many results, causing the sample list to be truncated. Consider adjusting the limit or startTime parameters..</param>
        public Samples(DateTime? lastTime = default(DateTime?), Dictionary<string, List<Sample>> sensors = default(Dictionary<string, List<Sample>>), string status = default(string), int? totalSamples = default(int?), int? totalSensors = default(int?), bool? truncated = default(bool?))
        {
            this.LastTime = lastTime;
            this.Sensors = sensors;
            this.Status = status;
            this.TotalSamples = totalSamples;
            this.TotalSensors = totalSensors;
            this.Truncated = truncated;
        }
        
        /// <summary>
        /// Timestamp of the last sample returned. Use this as the start_ts to query for the next page of samples.
        /// </summary>
        /// <value>Timestamp of the last sample returned. Use this as the start_ts to query for the next page of samples.</value>
        [DataMember(Name="last_time", EmitDefaultValue=false)]
        public DateTime? LastTime { get; set; }

        /// <summary>
        /// Map of sensors and the associated samples.
        /// </summary>
        /// <value>Map of sensors and the associated samples.</value>
        [DataMember(Name="sensors", EmitDefaultValue=false)]
        public Dictionary<string, List<Sample>> Sensors { get; set; }

        /// <summary>
        /// Message describing state of the api call.
        /// </summary>
        /// <value>Message describing state of the api call.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Total number of samples across all sensors
        /// </summary>
        /// <value>Total number of samples across all sensors</value>
        [DataMember(Name="total_samples", EmitDefaultValue=false)]
        public int? TotalSamples { get; set; }

        /// <summary>
        /// Total number of sensors returned
        /// </summary>
        /// <value>Total number of sensors returned</value>
        [DataMember(Name="total_sensors", EmitDefaultValue=false)]
        public int? TotalSensors { get; set; }

        /// <summary>
        /// The query returned too many results, causing the sample list to be truncated. Consider adjusting the limit or startTime parameters.
        /// </summary>
        /// <value>The query returned too many results, causing the sample list to be truncated. Consider adjusting the limit or startTime parameters.</value>
        [DataMember(Name="truncated", EmitDefaultValue=false)]
        public bool? Truncated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Samples {\n");
            sb.Append("  LastTime: ").Append(LastTime).Append("\n");
            sb.Append("  Sensors: ").Append(Sensors).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalSamples: ").Append(TotalSamples).Append("\n");
            sb.Append("  TotalSensors: ").Append(TotalSensors).Append("\n");
            sb.Append("  Truncated: ").Append(Truncated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Samples);
        }

        /// <summary>
        /// Returns true if Samples instances are equal
        /// </summary>
        /// <param name="input">Instance of Samples to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Samples input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastTime == input.LastTime ||
                    (this.LastTime != null &&
                    this.LastTime.Equals(input.LastTime))
                ) && 
                (
                    this.Sensors == input.Sensors ||
                    this.Sensors != null &&
                    this.Sensors.SequenceEqual(input.Sensors)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalSamples == input.TotalSamples ||
                    (this.TotalSamples != null &&
                    this.TotalSamples.Equals(input.TotalSamples))
                ) && 
                (
                    this.TotalSensors == input.TotalSensors ||
                    (this.TotalSensors != null &&
                    this.TotalSensors.Equals(input.TotalSensors))
                ) && 
                (
                    this.Truncated == input.Truncated ||
                    (this.Truncated != null &&
                    this.Truncated.Equals(input.Truncated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastTime != null)
                    hashCode = hashCode * 59 + this.LastTime.GetHashCode();
                if (this.Sensors != null)
                    hashCode = hashCode * 59 + this.Sensors.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalSamples != null)
                    hashCode = hashCode * 59 + this.TotalSamples.GetHashCode();
                if (this.TotalSensors != null)
                    hashCode = hashCode * 59 + this.TotalSensors.GetHashCode();
                if (this.Truncated != null)
                    hashCode = hashCode * 59 + this.Truncated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
