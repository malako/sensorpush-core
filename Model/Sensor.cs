/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// Sensor
    /// </summary>
    [DataContract]
    public partial class Sensor :  IEquatable<Sensor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sensor" /> class.
        /// </summary>
        /// <param name="active">Is the sensor active?.</param>
        /// <param name="address">MAC address.</param>
        /// <param name="alerts">alerts.</param>
        /// <param name="batteryVoltage">Current battery voltage.</param>
        /// <param name="calibration">calibration.</param>
        /// <param name="deviceId">Short device Id.</param>
        /// <param name="id">Long device Id.</param>
        /// <param name="name">Name of the sensor sensor.</param>
        public Sensor(bool? active = default(bool?), string address = default(string), SensorAlerts alerts = default(SensorAlerts), decimal? batteryVoltage = default(decimal?), SensorCalibration calibration = default(SensorCalibration), string deviceId = default(string), string id = default(string), string name = default(string))
        {
            this.Active = active;
            this.Address = address;
            this.Alerts = alerts;
            this.BatteryVoltage = batteryVoltage;
            this.Calibration = calibration;
            this.DeviceId = deviceId;
            this.Id = id;
            this.Name = name;
        }
        
        /// <summary>
        /// Is the sensor active?
        /// </summary>
        /// <value>Is the sensor active?</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// MAC address
        /// </summary>
        /// <value>MAC address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Alerts
        /// </summary>
        [DataMember(Name="alerts", EmitDefaultValue=false)]
        public SensorAlerts Alerts { get; set; }

        /// <summary>
        /// Current battery voltage
        /// </summary>
        /// <value>Current battery voltage</value>
        [DataMember(Name="battery_voltage", EmitDefaultValue=false)]
        public decimal? BatteryVoltage { get; set; }

        /// <summary>
        /// Gets or Sets Calibration
        /// </summary>
        [DataMember(Name="calibration", EmitDefaultValue=false)]
        public SensorCalibration Calibration { get; set; }

        /// <summary>
        /// Short device Id
        /// </summary>
        /// <value>Short device Id</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Long device Id
        /// </summary>
        /// <value>Long device Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the sensor sensor
        /// </summary>
        /// <value>Name of the sensor sensor</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Sensor {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Alerts: ").Append(Alerts).Append("\n");
            sb.Append("  BatteryVoltage: ").Append(BatteryVoltage).Append("\n");
            sb.Append("  Calibration: ").Append(Calibration).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sensor);
        }

        /// <summary>
        /// Returns true if Sensor instances are equal
        /// </summary>
        /// <param name="input">Instance of Sensor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sensor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Alerts == input.Alerts ||
                    (this.Alerts != null &&
                    this.Alerts.Equals(input.Alerts))
                ) && 
                (
                    this.BatteryVoltage == input.BatteryVoltage ||
                    (this.BatteryVoltage != null &&
                    this.BatteryVoltage.Equals(input.BatteryVoltage))
                ) && 
                (
                    this.Calibration == input.Calibration ||
                    (this.Calibration != null &&
                    this.Calibration.Equals(input.Calibration))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Alerts != null)
                    hashCode = hashCode * 59 + this.Alerts.GetHashCode();
                if (this.BatteryVoltage != null)
                    hashCode = hashCode * 59 + this.BatteryVoltage.GetHashCode();
                if (this.Calibration != null)
                    hashCode = hashCode * 59 + this.Calibration.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
