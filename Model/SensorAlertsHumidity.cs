/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// alert settings for humidity
    /// </summary>
    [DataContract]
    public partial class SensorAlertsHumidity :  IEquatable<SensorAlertsHumidity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SensorAlertsHumidity" /> class.
        /// </summary>
        /// <param name="enabled">Is enabled?.</param>
        /// <param name="max">Max threshold for alert.</param>
        /// <param name="min">Min threshold for alert.</param>
        public SensorAlertsHumidity(bool? enabled = default(bool?), decimal? max = default(decimal?), decimal? min = default(decimal?))
        {
            this.Enabled = enabled;
            this.Max = max;
            this.Min = min;
        }
        
        /// <summary>
        /// Is enabled?
        /// </summary>
        /// <value>Is enabled?</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Max threshold for alert
        /// </summary>
        /// <value>Max threshold for alert</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public decimal? Max { get; set; }

        /// <summary>
        /// Min threshold for alert
        /// </summary>
        /// <value>Min threshold for alert</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public decimal? Min { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SensorAlertsHumidity {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SensorAlertsHumidity);
        }

        /// <summary>
        /// Returns true if SensorAlertsHumidity instances are equal
        /// </summary>
        /// <param name="input">Instance of SensorAlertsHumidity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SensorAlertsHumidity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Max != null)
                    hashCode = hashCode * 59 + this.Max.GetHashCode();
                if (this.Min != null)
                    hashCode = hashCode * 59 + this.Min.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
