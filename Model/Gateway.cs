/* 
 * SensorPush Public API
 *
 * This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).
 *
 * OpenAPI spec version: v1.0.20200327
 * Contact: support@sensorpush.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Mrc.SensorPushCore.Client.SwaggerDateConverter;

namespace Mrc.SensorPushCore.Model
{
    /// <summary>
    /// Gateway
    /// </summary>
    [DataContract]
    public partial class Gateway :  IEquatable<Gateway>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Gateway" /> class.
        /// </summary>
        /// <param name="lastAlert">Date last alert was sent.</param>
        /// <param name="lastSeen">Date the gateway was last seen.</param>
        /// <param name="message">Detailed message associated with the gateway status..</param>
        /// <param name="name">Name associated with a gateway.</param>
        /// <param name="paired">Gateway is paired with a bluetooth device.</param>
        /// <param name="samples">Samples associated with SensorPush gateway.</param>
        /// <param name="version">Version of Sensorpush software.</param>
        public Gateway(DateTime? lastAlert = default(DateTime?), DateTime? lastSeen = default(DateTime?), string message = default(string), string name = default(string), string paired = default(string), Dictionary<string, Sample> samples = default(Dictionary<string, Sample>), string version = default(string))
        {
            this.LastAlert = lastAlert;
            this.LastSeen = lastSeen;
            this.Message = message;
            this.Name = name;
            this.Paired = paired;
            this.Samples = samples;
            this.Version = version;
        }
        
        /// <summary>
        /// Date last alert was sent
        /// </summary>
        /// <value>Date last alert was sent</value>
        [DataMember(Name="last_alert", EmitDefaultValue=false)]
        public DateTime? LastAlert { get; set; }

        /// <summary>
        /// Date the gateway was last seen
        /// </summary>
        /// <value>Date the gateway was last seen</value>
        [DataMember(Name="last_seen", EmitDefaultValue=false)]
        public DateTime? LastSeen { get; set; }

        /// <summary>
        /// Detailed message associated with the gateway status.
        /// </summary>
        /// <value>Detailed message associated with the gateway status.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Name associated with a gateway
        /// </summary>
        /// <value>Name associated with a gateway</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gateway is paired with a bluetooth device
        /// </summary>
        /// <value>Gateway is paired with a bluetooth device</value>
        [DataMember(Name="paired", EmitDefaultValue=false)]
        public string Paired { get; set; }

        /// <summary>
        /// Samples associated with SensorPush gateway
        /// </summary>
        /// <value>Samples associated with SensorPush gateway</value>
        [DataMember(Name="samples", EmitDefaultValue=false)]
        public Dictionary<string, Sample> Samples { get; set; }

        /// <summary>
        /// Version of Sensorpush software
        /// </summary>
        /// <value>Version of Sensorpush software</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Gateway {\n");
            sb.Append("  LastAlert: ").Append(LastAlert).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Paired: ").Append(Paired).Append("\n");
            sb.Append("  Samples: ").Append(Samples).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Gateway);
        }

        /// <summary>
        /// Returns true if Gateway instances are equal
        /// </summary>
        /// <param name="input">Instance of Gateway to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Gateway input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LastAlert == input.LastAlert ||
                    (this.LastAlert != null &&
                    this.LastAlert.Equals(input.LastAlert))
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Paired == input.Paired ||
                    (this.Paired != null &&
                    this.Paired.Equals(input.Paired))
                ) && 
                (
                    this.Samples == input.Samples ||
                    this.Samples != null &&
                    this.Samples.SequenceEqual(input.Samples)
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LastAlert != null)
                    hashCode = hashCode * 59 + this.LastAlert.GetHashCode();
                if (this.LastSeen != null)
                    hashCode = hashCode * 59 + this.LastSeen.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Paired != null)
                    hashCode = hashCode * 59 + this.Paired.GetHashCode();
                if (this.Samples != null)
                    hashCode = hashCode * 59 + this.Samples.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
